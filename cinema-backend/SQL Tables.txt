-- Create UserStatus table
CREATE TABLE IF NOT EXISTS UserStatus (
    status_id INT PRIMARY KEY,
    status_name VARCHAR(50) NOT NULL
);

-- Insert status values
INSERT INTO UserStatus (status_id, status_name) 
VALUES (1, 'Active'), (2, 'Inactive')
ON DUPLICATE KEY UPDATE status_name=VALUES(status_name);

-- Create movies table if it doesn't exist
CREATE TABLE IF NOT EXISTS movies (
    movie_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    category VARCHAR(100) NOT NULL,
    cast TEXT NOT NULL,
    director VARCHAR(255) NOT NULL,
    producer VARCHAR(255) NOT NULL,
    synopsis TEXT NOT NULL,
    reviews TEXT,
    trailer_picture VARCHAR(255) NOT NULL,
    trailer_video VARCHAR(255) NOT NULL,
    mpaa_rating VARCHAR(10) NOT NULL,
    status VARCHAR(50) DEFAULT 'Coming Soon'
);

-- Create user table if it doesn't exist
CREATE TABLE IF NOT EXISTS user (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    status_id INT DEFAULT 2,
    promotion_subscription BOOLEAN DEFAULT FALSE,
    verification_code VARCHAR(64),
    street_address VARCHAR(255) DEFAULT NULL,
    city VARCHAR(100) DEFAULT NULL,
    state VARCHAR(50) DEFAULT NULL,
    zip_code VARCHAR(20) DEFAULT NULL,
    is_admin TINYINT(1) DEFAULT 0,
    FOREIGN KEY (status_id) REFERENCES UserStatus(status_id)
);

-- Create card table if it doesn't exist
CREATE TABLE IF NOT EXISTS card (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cardholder_name VARCHAR(255) NOT NULL,
    card_number VARCHAR(255) NOT NULL,
    cvv VARCHAR(255) NOT NULL,
    card_address VARCHAR(255) NOT NULL,
    expiration_date VARCHAR(10) NOT NULL,
    customer_id INT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES user(user_id) ON DELETE CASCADE
);

-- Create table booking (simplified structure)
CREATE TABLE booking (
    booking_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NULL, -- Use NULL if user can book without logging in, otherwise NOT NULL
    booking_datetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('pending', 'confirmed', 'cancelled') DEFAULT 'pending',
    FOREIGN KEY (customer_id) REFERENCES user(user_id) ON DELETE SET NULL -- Or ON DELETE CASCADE if bookings should be removed when user is deleted
);

-- Create table promotion
CREATE TABLE promotion (
    promotion_id INT AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(20) NOT NULL,
    discount_percentage DECIMAL(5,2) NOT NULL,
    description VARCHAR(255) NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_sent BOOLEAN DEFAULT FALSE
);

-- Create table show_times
CREATE TABLE show_times (
    show_time_id INT AUTO_INCREMENT PRIMARY KEY,
    movie_id INT NULL,
    showroom_id INT NULL,
    show_date DATE NULL,
    show_time TIME NULL,
    available_seats INT NULL,
    duration INT NULL,
    price DECIMAL(10,2) NULL,
    FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE SET NULL,
    FOREIGN KEY (showroom_id) REFERENCES showroom(showroom_id) ON DELETE SET NULL
);

--create table showroom
CREATE TABLE showroom (
    showroom_id INT AUTO_INCREMENT PRIMARY KEY,
    theatre_id INT NULL,
    showroom_name VARCHAR(100) NULL,
    seat_count INT NULL,
    FOREIGN KEY (theatre_id) REFERENCES theatre(theatre_id) ON DELETE SET NULL
);

--create table theatre
CREATE TABLE theatre (
    theatre_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- Create table ticket (with movie_title)
CREATE TABLE ticket (
    ticket_id INT AUTO_INCREMENT PRIMARY KEY,
    booking_id INT NULL, -- Link to the booking table
    show_id INT NULL,
    movie_title VARCHAR(255) NULL,
    ticket_type ENUM('adult', 'senior', 'child') DEFAULT 'adult',
    price DECIMAL(10,2) NULL,
    seat_number VARCHAR(10) NULL,
    FOREIGN KEY (booking_id) REFERENCES booking(booking_id) ON DELETE SET NULL, -- Or ON DELETE CASCADE
    FOREIGN KEY (show_id) REFERENCES show_times(show_time_id) ON DELETE SET NULL
);

