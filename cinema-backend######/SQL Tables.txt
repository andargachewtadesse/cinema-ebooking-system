
-- Create UserStatus table
CREATE TABLE IF NOT EXISTS UserStatus (
    status_id INT PRIMARY KEY,
    status_name VARCHAR(50) NOT NULL
);

-- Insert status values
INSERT INTO UserStatus (status_id, status_name) 
VALUES (1, 'Active'), (2, 'Inactive')
ON DUPLICATE KEY UPDATE status_name=VALUES(status_name);

-- Create movies table if it doesn't exist
CREATE TABLE IF NOT EXISTS movies (
    movie_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    category VARCHAR(100) NOT NULL,
    cast TEXT NOT NULL,
    director VARCHAR(255) NOT NULL,
    producer VARCHAR(255) NOT NULL,
    synopsis TEXT NOT NULL,
    reviews TEXT,
    trailer_picture VARCHAR(255) NOT NULL,
    trailer_video VARCHAR(255) NOT NULL,
    mpaa_rating VARCHAR(10) NOT NULL,
    status VARCHAR(50) DEFAULT 'Coming Soon'
);

-- Create show_times table if it doesn't exist
CREATE TABLE IF NOT EXISTS show_times (
    show_time_id INT AUTO_INCREMENT PRIMARY KEY,
    movie_id INT NOT NULL,
    show_date DATE NOT NULL,
    show_time TIME NOT NULL,
    screen_number INT NOT NULL,
    available_seats INT NOT NULL,
    price DECIMAL(6,2) NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE CASCADE
);

-- Create user table if it doesn't exist
CREATE TABLE IF NOT EXISTS user (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    status_id INT DEFAULT 2,
    promotion_subscription BOOLEAN DEFAULT FALSE,
    verification_code VARCHAR(64),
    FOREIGN KEY (status_id) REFERENCES UserStatus(status_id)
);

-- Create card table if it doesn't exist
CREATE TABLE IF NOT EXISTS card (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cardholder_name VARCHAR(255) NOT NULL,
    card_number VARCHAR(255) NOT NULL,
    cvv VARCHAR(255) NOT NULL,
    card_address VARCHAR(255) NOT NULL,
    expiration_date VARCHAR(10) NOT NULL,
    customer_id INT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES user(user_id) ON DELETE CASCADE
);
